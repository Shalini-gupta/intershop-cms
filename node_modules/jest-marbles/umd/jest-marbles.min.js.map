{"version":3,"sources":["webpack://JestMarbles/webpack/universalModuleDefinition","webpack://JestMarbles/webpack/bootstrap","webpack://JestMarbles/external \"jest-matcher-utils\"","webpack://JestMarbles/external \"rxjs\"","webpack://JestMarbles/external \"jest-diff\"","webpack://JestMarbles/external \"rxjs/testing\"","webpack://JestMarbles/external \"expect/build/jasmineUtils\"","webpack://JestMarbles/./src/marbles-glossary.ts","webpack://JestMarbles/./src/notification-event.ts","webpack://JestMarbles/./src/notification-kind.ts","webpack://JestMarbles/./src/marblizer.ts","webpack://JestMarbles/./src/jest/custom-matchers.ts","webpack://JestMarbles/./src/rxjs/assert-deep-equal.ts","webpack://JestMarbles/./src/rxjs/scheduler.ts","webpack://JestMarbles/./src/rxjs/cold-observable.ts","webpack://JestMarbles/./src/rxjs/hot-observable.ts","webpack://JestMarbles/./src/rxjs/strip-alignment-chars.ts","webpack://JestMarbles/./index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__4__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","MarblesGlossary","start","marbles","length","ValueLiteral","NotificationKindChars","N","C","Completion","E","Error","marblize","messages","emissions","Marblizer","getNotificationEvents","prevEndFrame","end","TimeFrame","repeat","marblizeSubscriptions","logs","map","log","marblizeLogEntry","subscribedFrame","Subscription","unsubscribedFrame","Unsubscription","logPoint","symbol","Infinity","framesToEmissions","reduce","result","message","frame","NotificationEvent","extractMarble","events","keys","encloseGroupEvents","marble","notification","kind","forEach","event","GroupStart","GroupEnd","isCharacter","undefined","JSON","stringify","customTestMatchers","toBeNotifications","actual","expected","actualMarble","expectedMarble","every","filter","canMarblize","pass","diffString","expand","toBeSubscriptions","actualMarbleArray","expectedMarbleArray","includes","subscriptionsPass","toHaveEmptySubscriptions","assertDeepEqual","actualIsSubscriptionsAndExpectedIsEmpty","expectedIsSubscriptionLogArray","expect","extend","init","Scheduler","instance","reset","materializeInnerObservable","observable","outerFrame","values","error","source","createColdObservable","getSubscriptions","subscriptions","createHotObservable","stripAlignmentChars","replace","hot","cold","time","createTime","dummyResult","toHaveSubscriptions","sanitizedMarbles","Array","isArray","expectSubscriptions","toBe","toHaveNoSubscriptions","toBeObservable","expectObservable","toBeMarble","toSatisfyOnFlush","func","flushTests","ready","onFlush","push","beforeEach","afterEach","flush","shift"],"mappings":"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","file":"jest-marbles.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"jest-matcher-utils\"), require(\"rxjs\"), require(\"jest-diff\"), require(\"rxjs/testing\"), require(\"expect/build/jasmineUtils\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"JestMarbles\", [\"jest-matcher-utils\", \"rxjs\", \"jest-diff\", \"rxjs/testing\", \"expect/build/jasmineUtils\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JestMarbles\"] = factory(require(\"jest-matcher-utils\"), require(\"rxjs\"), require(\"jest-diff\"), require(\"rxjs/testing\"), require(\"expect/build/jasmineUtils\"));\n\telse\n\t\troot[\"JestMarbles\"] = factory(root[\"jest-matcher-utils\"], root[\"rxjs\"], root[\"jest-diff\"], root[\"rxjs/testing\"], root[\"expect/build/jasmineUtils\"]);\n})((typeof self !== 'undefined' ? self : this), function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__2__, __WEBPACK_EXTERNAL_MODULE__3__, __WEBPACK_EXTERNAL_MODULE__4__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","export enum MarblesGlossary {\n  Completion = '|',\n  Error = '#',\n  TimeFrame = '-',\n  Subscription = '^',\n  Unsubscription = '!',\n  GroupStart = '(',\n  GroupEnd = ')',\n}\n","export class NotificationEvent {\n  marbles = '';\n  constructor(public start: number) {}\n  get end(): number {\n    return this.start + this.marbles.length;\n  }\n}\n","import { MarblesGlossary } from './marbles-glossary';\nexport const ValueLiteral = {};\n\nexport const NotificationKindChars = {\n  N: ValueLiteral,\n  C: MarblesGlossary.Completion,\n  E: MarblesGlossary.Error,\n};\n","import { SubscriptionLog, TestMessages } from './rxjs/types';\nimport { MarblesGlossary } from './marbles-glossary';\nimport { NotificationEvent } from './notification-event';\nimport { NotificationKindChars, ValueLiteral } from './notification-kind';\n\nconst frameStep = 10;\n\nexport class Marblizer {\n  public static marblize(messages: TestMessages): string {\n    const emissions = Marblizer.getNotificationEvents(messages);\n    let marbles = '';\n    for (let i = 0, prevEndFrame = 0; i < emissions.length; prevEndFrame = emissions[i].end, i++) {\n      marbles = `${marbles}${MarblesGlossary.TimeFrame.repeat(emissions[i].start - prevEndFrame) +\n        emissions[i].marbles}`;\n    }\n    return marbles;\n  }\n\n  public static marblizeSubscriptions(logs: SubscriptionLog[]): string[] {\n    return logs.map(\n      log =>\n        this.marblizeLogEntry(log.subscribedFrame / frameStep, MarblesGlossary.Subscription) +\n        this.marblizeLogEntry(\n          (log.unsubscribedFrame - log.subscribedFrame) / frameStep - 1,\n          MarblesGlossary.Unsubscription\n        )\n    );\n  }\n\n  private static marblizeLogEntry(logPoint: number, symbol: string): string {\n    if (logPoint !== Infinity) {\n      return MarblesGlossary.TimeFrame.repeat(logPoint) + symbol;\n    } else {\n      return '';\n    }\n  }\n\n  private static getNotificationEvents(messages: TestMessages) {\n    const framesToEmissions = messages.reduce<{ [frame: number]: NotificationEvent }>((result, message) => {\n      if (!result[message.frame]) {\n        result[message.frame] = new NotificationEvent(message.frame / frameStep);\n      }\n      const event = result[message.frame];\n      event.marbles += Marblizer.extractMarble(message);\n      return result;\n    }, {});\n\n    const events = Object.keys(framesToEmissions).map<NotificationEvent>(frame => framesToEmissions[frame]);\n\n    Marblizer.encloseGroupEvents(events);\n    return events;\n  }\n\n  private static extractMarble(message: TestMessages[0]) {\n    let marble = NotificationKindChars[message.notification.kind];\n    if (marble === ValueLiteral) marble = (message.notification as any).value;\n    return marble;\n  }\n\n  private static encloseGroupEvents(events: NotificationEvent[]) {\n    events.forEach(event => {\n      if (event.marbles.length > 1) {\n        event.marbles = `${MarblesGlossary.GroupStart}${event.marbles}${MarblesGlossary.GroupEnd}`;\n      }\n    });\n  }\n}\n","import { equals } from 'expect/build/jasmineUtils';\nimport { diff } from 'jest-diff';\nimport { matcherHint, printExpected, printReceived } from 'jest-matcher-utils';\nimport { TestMessages, SubscriptionLog } from '../rxjs/types';\nimport { Marblizer } from '../marblizer';\n\nfunction canMarblize(...messages: TestMessages[]) {\n  return messages.every(message => message.filter(({ notification: { kind } }) => kind === 'N').every(isCharacter));\n}\n\nfunction isCharacter({ notification }: TestMessages[0]): boolean {\n  const value = (notification as any).value;\n  return (\n    (typeof value === 'string' && value.length === 1) || (value !== undefined && JSON.stringify(value).length === 1)\n  );\n}\n\nexport const customTestMatchers = {\n  toBeNotifications(actual: TestMessages, expected: TestMessages) {\n    let actualMarble: string | TestMessages = actual;\n    let expectedMarble: string | TestMessages = expected;\n    if (canMarblize(actual, expected)) {\n      actualMarble = Marblizer.marblize(actual);\n      expectedMarble = Marblizer.marblize(expected);\n    }\n\n    const pass = equals(actualMarble, expectedMarble);\n\n    const message = pass\n      ? () =>\n          matcherHint('.not.toBeNotifications') +\n          '\\n\\n' +\n          `Expected notifications to not be:\\n` +\n          `  ${printExpected(expectedMarble)}\\n` +\n          `But got:\\n` +\n          `  ${printReceived(actualMarble)}`\n      : () => {\n          const diffString = diff(expectedMarble, actualMarble, {\n            expand: true,\n          });\n          return (\n            matcherHint('.toBeNotifications') +\n            '\\n\\n' +\n            `Expected notifications to be:\\n` +\n            `  ${printExpected(expectedMarble)}\\n` +\n            `But got:\\n` +\n            `  ${printReceived(actualMarble)}` +\n            (diffString ? `\\n\\nDifference:\\n\\n${diffString}` : '')\n          );\n        };\n\n    return { actual, message, pass };\n  },\n\n  toBeSubscriptions(actual: SubscriptionLog[], expected: SubscriptionLog[]) {\n    const actualMarbleArray = Marblizer.marblizeSubscriptions(actual);\n    const expectedMarbleArray = Marblizer.marblizeSubscriptions(expected);\n\n    const pass = subscriptionsPass(actualMarbleArray, expectedMarbleArray);\n    const message = pass\n      ? () =>\n          matcherHint('.not.toHaveSubscriptions') +\n          '\\n\\n' +\n          `Expected observable to not have the following subscription points:\\n` +\n          `  ${printExpected(expectedMarbleArray)}\\n` +\n          `But got:\\n` +\n          `  ${printReceived(actualMarbleArray)}`\n      : () => {\n          const diffString = diff(expectedMarbleArray, actualMarbleArray, {\n            expand: true,\n          });\n          return (\n            matcherHint('.toHaveSubscriptions') +\n            '\\n\\n' +\n            `Expected observable to have the following subscription points:\\n` +\n            `  ${printExpected(expectedMarbleArray)}\\n` +\n            `But got:\\n` +\n            `  ${printReceived(actualMarbleArray)}` +\n            (diffString ? `\\n\\nDifference:\\n\\n${diffString}` : '')\n          );\n        };\n\n    return { actual, message, pass };\n  },\n\n  toHaveEmptySubscriptions(actual: SubscriptionLog[] | undefined) {\n    const pass = !(actual && actual.length > 0);\n    let marbles: string[];\n    if (actual && actual.length > 0) {\n      marbles = Marblizer.marblizeSubscriptions(actual);\n    }\n    const message = pass\n      ? () =>\n          matcherHint('.not.toHaveNoSubscriptions') +\n          '\\n\\n' +\n          `Expected observable to have at least one subscription point, but got nothing` +\n          printReceived('')\n      : () =>\n          matcherHint('.toHaveNoSubscriptions') +\n          '\\n\\n' +\n          `Expected observable to have no subscription points\\n` +\n          `But got:\\n` +\n          `  ${printReceived(marbles)}\\n\\n`;\n    return { actual, message, pass };\n  },\n};\n\nfunction subscriptionsPass(actualMarbleArray: string[], expectedMarbleArray: string[]): boolean {\n  if (actualMarbleArray.length !== expectedMarbleArray.length) {\n    return false;\n  }\n  let pass = true;\n  for (const actualMarble of actualMarbleArray) {\n    if (!expectedMarbleArray.includes(actualMarble)) {\n      pass = false;\n      break;\n    }\n  }\n  return pass;\n}\n\ndeclare global {\n  namespace jest {\n    interface Matchers<R, T> {\n      toBeNotifications(notifications: TestMessages): void;\n\n      toBeSubscriptions(subscriptions: SubscriptionLog[]): void;\n\n      toHaveEmptySubscriptions(): void;\n    }\n  }\n}\n\nexpect.extend(customTestMatchers);\n","import { TestMessages, SubscriptionLog } from '../rxjs/types';\n\nimport '../jest/custom-matchers';\n\nexport type MessageOrSubscription = TestMessages | SubscriptionLog[];\n\nfunction expectedIsSubscriptionLogArray(\n  actual: MessageOrSubscription,\n  expected: MessageOrSubscription\n): expected is SubscriptionLog[] {\n  return (\n    (actual.length === 0 && expected.length === 0) ||\n    (expected.length !== 0 && (expected[0] as any).subscribedFrame !== undefined)\n  );\n}\n\nfunction actualIsSubscriptionsAndExpectedIsEmpty(\n  actual: MessageOrSubscription,\n  expected: MessageOrSubscription\n): actual is SubscriptionLog[] {\n  return expected.length === 0 && actual.length !== 0 && (actual[0] as any).subscribedFrame !== undefined;\n}\n\nexport function assertDeepEqual(actual: MessageOrSubscription, expected: MessageOrSubscription) {\n  if (!expected) return;\n  if (actualIsSubscriptionsAndExpectedIsEmpty(actual, expected)) {\n    expect(actual).toHaveEmptySubscriptions();\n  } else if (expectedIsSubscriptionLogArray(actual, expected)) {\n    expect(actual).toBeSubscriptions(expected);\n  } else {\n    expect(actual).toBeNotifications(expected);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { TestMessages } from './types';\nimport { TestScheduler } from 'rxjs/testing';\n\nimport { assertDeepEqual } from './assert-deep-equal';\n\nexport class Scheduler {\n  public static instance: TestScheduler | null;\n\n  public static init(): void {\n    Scheduler.instance = new TestScheduler(assertDeepEqual);\n  }\n\n  public static get(): TestScheduler {\n    if (Scheduler.instance) {\n      return Scheduler.instance;\n    }\n    throw new Error('Scheduler is not initialized');\n  }\n\n  public static reset(): void {\n    Scheduler.instance = null;\n  }\n\n  public static materializeInnerObservable(observable: Observable<any>, outerFrame: number): TestMessages {\n    const scheduler = Scheduler.get();\n    // @ts-ignore\n    return scheduler.materializeInnerObservable(observable, outerFrame);\n  }\n}\n","import { Observable } from 'rxjs';\nimport { TestScheduler } from 'rxjs/testing';\nimport { SubscriptionLog } from '../rxjs/types';\n\nimport { Scheduler } from './scheduler';\n\nexport class ColdObservable extends Observable<any> {\n  source: ReturnType<TestScheduler['createColdObservable']>;\n  constructor(public marbles: string, public values?: Record<string, any>, public error?: any) {\n    super();\n\n    this.source = Scheduler.get().createColdObservable(marbles, values, error);\n  }\n\n  getSubscriptions(): SubscriptionLog[] {\n    return this.source.subscriptions;\n  }\n}\n","import { Observable } from 'rxjs';\nimport { TestScheduler } from 'rxjs/testing';\nimport { SubscriptionLog } from '../rxjs/types';\n\nimport { Scheduler } from './scheduler';\n\nexport class HotObservable extends Observable<any> {\n  source: ReturnType<TestScheduler['createHotObservable']>;\n  constructor(public marbles: string, public values?: Record<string, any>, public error?: any) {\n    super();\n\n    this.source = Scheduler.get().createHotObservable(marbles, values, error);\n  }\n\n  getSubscriptions(): SubscriptionLog[] {\n    return this.source.subscriptions;\n  }\n}\n","export function stripAlignmentChars(marbles: string) {\n  return marbles.replace(/^[ ]+/, '');\n}\n","import { ColdObservable } from './src/rxjs/cold-observable';\nimport { HotObservable } from './src/rxjs/hot-observable';\nimport { Scheduler } from './src/rxjs/scheduler';\nimport { stripAlignmentChars } from './src/rxjs/strip-alignment-chars';\n\nexport type ObservableWithSubscriptions = ColdObservable | HotObservable;\n\nexport { Scheduler } from './src/rxjs/scheduler';\n\ndeclare global {\n  namespace jest {\n    interface Matchers<R, T> {\n      toBeObservable(observable: ObservableWithSubscriptions): void;\n\n      toHaveSubscriptions(marbles: string | string[]): void;\n\n      toHaveNoSubscriptions(): void;\n\n      toBeMarble(marble: string): void;\n\n      toSatisfyOnFlush(func: () => void): void;\n    }\n  }\n}\n\nexport function hot(marbles: string, values?: any, error?: any): HotObservable {\n  return new HotObservable(stripAlignmentChars(marbles), values, error);\n}\n\nexport function cold(marbles: string, values?: any, error?: any): ColdObservable {\n  return new ColdObservable(stripAlignmentChars(marbles), values, error);\n}\n\nexport function time(marbles: string): number {\n  return Scheduler.get().createTime(stripAlignmentChars(marbles));\n}\n\nconst dummyResult = {\n  message: () => '',\n  pass: true\n};\n\nexpect.extend({\n\n  toHaveSubscriptions(actual: ObservableWithSubscriptions, marbles: string | string[]) {\n    const sanitizedMarbles = Array.isArray(marbles) ? marbles.map(stripAlignmentChars) : stripAlignmentChars(marbles);\n    Scheduler.get().expectSubscriptions(actual.getSubscriptions()).toBe(sanitizedMarbles);\n    return dummyResult;\n  },\n\n  toHaveNoSubscriptions(actual: ObservableWithSubscriptions) {\n    Scheduler.get().expectSubscriptions(actual.getSubscriptions()).toBe([]);\n    return dummyResult;\n  },\n\n  toBeObservable(actual, expected: ObservableWithSubscriptions) {\n    Scheduler.get().expectObservable(actual).toBe(expected.marbles, expected.values, expected.error);\n    return dummyResult;\n  },\n\n  toBeMarble(actual: ObservableWithSubscriptions, marbles: string) {\n    Scheduler.get().expectObservable(actual).toBe(stripAlignmentChars(marbles));\n    return dummyResult;\n  },\n\n  toSatisfyOnFlush(actual: ObservableWithSubscriptions, func: () => void) {\n    Scheduler.get().expectObservable(actual);\n    // tslint:disable:no-string-literal\n    const flushTests = Scheduler.get()['flushTests'];\n    flushTests[flushTests.length - 1].ready = true;\n    onFlush.push(func);\n    return dummyResult;\n  }\n});\n\nlet onFlush: (() => void)[] = [];\n\nbeforeEach(() => { Scheduler.init(); onFlush = []; });\nafterEach(() => {\n  Scheduler.get().flush();\n  while (onFlush.length > 0) {\n    // @ts-ignore\n    onFlush.shift()();\n  }\n  Scheduler.reset();\n});\n"],"sourceRoot":""}