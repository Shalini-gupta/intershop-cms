import * as tslib_1 from "tslib";
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { AfterViewInit, Directive, ElementRef, EventEmitter, Inject, Input, NgZone, OnDestroy, OnInit, Output, PLATFORM_ID } from '@angular/core';
import { fromEvent } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
var DeferLoadDirective = /** @class */ (function () {
    function DeferLoadDirective(_element, _zone, platformId) {
        var _this = this;
        this._element = _element;
        this._zone = _zone;
        this.platformId = platformId;
        this.preRender = true;
        this.fallbackEnabled = true;
        this.removeListenersAfterLoad = true;
        this.deferLoad = new EventEmitter();
        this.checkForIntersection = function (entries) {
            entries.forEach(function (entry) {
                if (_this.checkIfIntersecting(entry)) {
                    _this.load();
                    if (_this._intersectionObserver && _this._element.nativeElement) {
                        _this._intersectionObserver.unobserve((_this._element.nativeElement));
                    }
                }
            });
        };
        this.onScroll = function () {
            if (_this.isVisible()) {
                _this._zone.run(function () { return _this.load(); });
            }
        };
    }
    DeferLoadDirective.prototype.ngOnInit = function () {
        if ((isPlatformServer(this.platformId) && this.preRender === true) ||
            (isPlatformBrowser(this.platformId) && this.fallbackEnabled === false && !this.hasCompatibleBrowser())) {
            this.load();
        }
    };
    DeferLoadDirective.prototype.ngAfterViewInit = function () {
        if (isPlatformBrowser(this.platformId)) {
            if (this.hasCompatibleBrowser()) {
                this.registerIntersectionObserver();
                if (this._intersectionObserver && this._element.nativeElement) {
                    this._intersectionObserver.observe((this._element.nativeElement));
                }
            }
            else if (this.fallbackEnabled === true) {
                this.addScrollListeners();
            }
        }
    };
    DeferLoadDirective.prototype.hasCompatibleBrowser = function () {
        var hasIntersectionObserver = 'IntersectionObserver' in window;
        var userAgent = window.navigator.userAgent;
        var matches = userAgent.match(/Edge\/(\d*)\./i);
        var isEdge = !!matches && matches.length > 1;
        var isEdgeVersion16OrBetter = isEdge && (!!matches && parseInt(matches[1], 10) > 15);
        return hasIntersectionObserver && (!isEdge || isEdgeVersion16OrBetter);
    };
    DeferLoadDirective.prototype.ngOnDestroy = function () {
        this.removeListeners();
    };
    DeferLoadDirective.prototype.registerIntersectionObserver = function () {
        var _this = this;
        if (!!this._intersectionObserver) {
            return;
        }
        this._intersectionObserver = new IntersectionObserver(function (entries) {
            _this.checkForIntersection(entries);
        }, {});
    };
    DeferLoadDirective.prototype.checkIfIntersecting = function (entry) {
        // For Samsung native browser, IO has been partially implemented where by the
        // callback fires, but entry object is empty. We will check manually.
        if (entry && entry.time) {
            return entry.isIntersecting && entry.target === this._element.nativeElement;
        }
        return this.isVisible();
    };
    DeferLoadDirective.prototype.load = function () {
        if (this.removeListenersAfterLoad) {
            this.removeListeners();
        }
        this.deferLoad.emit();
    };
    DeferLoadDirective.prototype.addScrollListeners = function () {
        var _this = this;
        if (this.isVisible()) {
            this.load();
            return;
        }
        this._zone.runOutsideAngular(function () {
            _this._scrollSubscription = fromEvent(window, 'scroll')
                .pipe(debounceTime(50))
                .subscribe(_this.onScroll);
        });
    };
    DeferLoadDirective.prototype.removeListeners = function () {
        if (this._scrollSubscription) {
            this._scrollSubscription.unsubscribe();
        }
        if (this._intersectionObserver) {
            this._intersectionObserver.disconnect();
        }
    };
    DeferLoadDirective.prototype.isVisible = function () {
        var scrollPosition = this.getScrollPosition();
        var elementOffset = this._element.nativeElement.getBoundingClientRect().top + (window.scrollY || window.pageYOffset);
        return elementOffset <= scrollPosition;
    };
    DeferLoadDirective.prototype.getScrollPosition = function () {
        // Getting screen size and scroll position for IE
        return (window.scrollY || window.pageYOffset)
            + (document.documentElement.clientHeight || document.body.clientHeight);
    };
    DeferLoadDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    tslib_1.__decorate([
        Input()
    ], DeferLoadDirective.prototype, "preRender", void 0);
    tslib_1.__decorate([
        Input()
    ], DeferLoadDirective.prototype, "fallbackEnabled", void 0);
    tslib_1.__decorate([
        Input()
    ], DeferLoadDirective.prototype, "removeListenersAfterLoad", void 0);
    tslib_1.__decorate([
        Output()
    ], DeferLoadDirective.prototype, "deferLoad", void 0);
    DeferLoadDirective = tslib_1.__decorate([
        Directive({
            selector: '[deferLoad]'
        }),
        tslib_1.__param(2, Inject(PLATFORM_ID))
    ], DeferLoadDirective);
    return DeferLoadDirective;
}());
export { DeferLoadDirective };
//# sourceMappingURL=data:application/json;base64,