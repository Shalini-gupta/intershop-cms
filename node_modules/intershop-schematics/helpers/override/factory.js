"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.override = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@schematics/angular/utility/workspace");
const filesystem_1 = require("../../utils/filesystem");
const registration_1 = require("../../utils/registration");
function override(options) {
    // eslint-disable-next-line complexity
    return (host) => __awaiter(this, void 0, void 0, function* () {
        var _a;
        if (!options.project) {
            throw new schematics_1.SchematicsException('Option (project) is required.');
        }
        if (!options.from) {
            throw new schematics_1.SchematicsException('Option (from) is required.');
        }
        const workspace = yield (0, workspace_1.getWorkspace)(host);
        const project = workspace.projects.get(options.project);
        const sourceRoot = project.sourceRoot;
        const from = `${options.path ? `${options.path}/` : !((_a = options.from) === null || _a === void 0 ? void 0 : _a.startsWith(`${sourceRoot}/app/`)) ? `${sourceRoot}/app/` : ''}${options.from.replace(/\/$/, '')}`;
        if (!host.exists(from) || !from.endsWith('.ts')) {
            throw new schematics_1.SchematicsException('Input does not point to an existing TypeScript file.');
        }
        if (!options.theme) {
            throw new schematics_1.SchematicsException('Option (theme) is required.');
        }
        if ((options.html || options.scss) && !from.includes('.component.')) {
            throw new schematics_1.SchematicsException('Template and Style overrides only work on components.');
        }
        if (options.html) {
            const target = from.replace(/([^\\\/]+).ts$/, `$1.${options.theme}.html`);
            host.create(target, 'OVERRIDE');
        }
        const operations = [];
        if (options.scss) {
            const originalScss = from.replace(/([^\\\/]+).ts$/, '$1.scss');
            if (!host.exists(originalScss)) {
                host.create(originalScss, '/* empty file for overriding with file replacements */');
                operations.push((0, registration_1.setStyleUrls)(from, [originalScss]));
            }
            const target = from.replace(/([^\\\/]+).ts$/, `$1.${options.theme}.scss`);
            host.create(target, `/* style definitions for overriding with theme "${options.theme}" */`);
        }
        if (options.ts) {
            const target = from.replace(/([^\\\/]+).ts$/, `$1.${options.theme}.ts`);
            operations.push((0, filesystem_1.copyFile)(from, target));
        }
        return (0, schematics_1.chain)(operations);
    });
}
exports.override = override;
