"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLazyComponents = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@schematics/angular/utility/workspace");
function createLazyComponents(options) {
    return (host) => __awaiter(this, void 0, void 0, function* () {
        if (!options.project) {
            throw new schematics_1.SchematicsException('Option (project) is required.');
        }
        const workspace = yield (0, workspace_1.getWorkspace)(host);
        const project = workspace.projects.get(options.project);
        const operations = [];
        const fileVisitor = (file) => {
            if (file.endsWith('.component.ts')) {
                const componentContent = host.read(file).toString('utf-8');
                if (componentContent.includes('@GenerateLazyComponent')) {
                    operations.push((0, schematics_1.schematic)('lazy-component', Object.assign(Object.assign({}, options), { path: file.substring(1) })));
                }
            }
            try {
                host.getDir(file).visit(fileVisitor);
            }
            catch (err) {
                // do nothing
            }
        };
        const extensionsRoot = `/${project.sourceRoot}/app/extensions`;
        host.getDir(extensionsRoot).subdirs.forEach(extension => {
            const sharedComponentFolder = `${extensionsRoot}/${extension}/shared`;
            host.getDir(sharedComponentFolder).visit(fileVisitor);
        });
        const projectsRoot = `/projects`;
        host.getDir(projectsRoot).subdirs.forEach(projectName => {
            const sharedComponentFolder = `${projectsRoot}/${projectName}/src/app/components`;
            host.getDir(sharedComponentFolder).visit(fileVisitor);
        });
        const sharedRoot = `/src/app/shared`;
        host.getDir(sharedRoot).visit(fileVisitor);
        return (0, schematics_1.chain)(operations);
    });
}
exports.createLazyComponents = createLazyComponents;
