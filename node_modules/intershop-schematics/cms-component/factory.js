"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCMSComponent = void 0;
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const common_1 = require("../utils/common");
const lint_fix_1 = require("../utils/lint-fix");
const registration_1 = require("../utils/registration");
function createCMSComponent(options) {
    return (host) => __awaiter(this, void 0, void 0, function* () {
        if (!options.project) {
            throw new schematics_1.SchematicsException('Option (project) is required.');
        }
        else if (!options.definitionQualifiedName) {
            throw new schematics_1.SchematicsException('Option (definitionQualifiedName) is required.');
        }
        options = yield (0, common_1.detectExtension)('cms', host, options);
        options = yield (0, common_1.applyNameAndPath)('component', host, options);
        if (!options.noCMSPrefixing) {
            options.name = `cms-${options.name}`;
        }
        options = (0, common_1.determineArtifactName)('component', host, options);
        if (!options.noCMSPrefixing) {
            options.artifactName = `CMS${options.artifactName.replace('Cms', '')}`;
        }
        options = yield (0, common_1.generateSelector)(host, options);
        options.module = 'shared/shared.module';
        options = (0, common_1.findDeclaringModule)(host, options);
        const operations = [];
        operations.push((0, registration_1.addDeclarationToNgModule)(options));
        let cmModuleOptions = Object.assign(Object.assign({}, options), { module: 'shared/cms/cms.module' });
        cmModuleOptions = (0, common_1.findDeclaringModule)(host, cmModuleOptions);
        operations.push((0, registration_1.addImportToFile)(cmModuleOptions));
        operations.push((0, registration_1.addProviderToNgModule)({
            module: cmModuleOptions.module,
            artifactName: `{
      provide: CMS_COMPONENT,
      useValue: {
        definitionQualifiedName: '${options.definitionQualifiedName}',
        class: ${options.artifactName},
      },
      multi: true,
    }`,
        }));
        operations.push((0, schematics_1.mergeWith)((0, schematics_1.apply)((0, schematics_1.url)('./files'), [
            options.styleFile ? (0, schematics_1.noop)() : (0, schematics_1.filter)(path => !path.includes('.scss')),
            (0, schematics_1.applyTemplates)(Object.assign(Object.assign(Object.assign({}, core_1.strings), options), { 'if-flat': s => (options.flat ? '' : s) })),
            (0, schematics_1.move)(options.path),
        ])));
        operations.push((0, lint_fix_1.applyLintFix)());
        return (0, schematics_1.chain)(operations);
    });
}
exports.createCMSComponent = createCMSComponent;
