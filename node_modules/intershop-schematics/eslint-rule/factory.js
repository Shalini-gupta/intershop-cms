"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.eslintRule = void 0;
const core_1 = require("@angular-devkit/core");
const strings_1 = require("@angular-devkit/core/src/utils/strings");
const schematics_1 = require("@angular-devkit/schematics");
const ts_morph_1 = require("ts-morph");
const lint_fix_1 = require("../utils/lint-fix");
const registration_1 = require("../utils/registration");
const ts_morph_2 = require("../utils/ts-morph");
// You don't have to export the function as default. You can also have more than one rule factory
// per file.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function eslintRule(options) {
    // update options
    options.path = '/eslint-rules/';
    return (_) => __awaiter(this, void 0, void 0, function* () {
        const operations = [];
        operations.push((0, schematics_1.mergeWith)((0, schematics_1.apply)((0, schematics_1.url)('./files'), [
            (0, schematics_1.applyTemplates)(Object.assign(Object.assign({}, core_1.strings), options)),
            (0, schematics_1.move)(options.path),
        ])));
        operations.push(addEslintRuleToObject(options));
        operations.push((0, registration_1.addImportToFile)({
            module: '/eslint-rules/src/index.ts',
            artifactName: `${(0, strings_1.camelize)(options.name)}Rule`,
            moduleImportPath: `/eslint-rules/src/rules/${options.name}`,
        }));
        operations.push((0, lint_fix_1.applyLintFix)());
        return (0, schematics_1.chain)(operations);
    });
}
exports.eslintRule = eslintRule;
function addEslintRuleToObject(options) {
    return host => {
        const tsMorphProject = (0, ts_morph_2.createTsMorphProject)(host);
        tsMorphProject.addSourceFileAtPath('/eslint-rules/src/index.ts');
        const sourceFile = tsMorphProject.getSourceFile('/eslint-rules/src/index.ts');
        sourceFile.getFirstDescendantByKindOrThrow(ts_morph_1.SyntaxKind.ObjectLiteralExpression).addPropertyAssignment({
            name: `'${options.name}'`,
            initializer: `${(0, strings_1.camelize)(options.name)}Rule`,
        });
        host.overwrite('/eslint-rules/src/index.ts', sourceFile.getText());
    };
}
