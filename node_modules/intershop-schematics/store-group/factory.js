"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStoreGroup = void 0;
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@schematics/angular/utility/workspace");
const common_1 = require("../utils/common");
const lint_fix_1 = require("../utils/lint-fix");
const registration_1 = require("../utils/registration");
function determineStoreGroupLocation(host, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const workspace = yield (0, workspace_1.getWorkspace)(host);
        const project = workspace.projects.get(options.project);
        const path = (0, core_1.normalize)(`${(0, workspace_1.buildDefaultPath)(project)}/core/store/`);
        const module = (0, core_1.normalize)(`${(0, workspace_1.buildDefaultPath)(project)}/core/state-management.module.ts`);
        const artifactName = `${core_1.strings.classify(options.name)}StoreModule`;
        const moduleImportPath = (0, core_1.normalize)(`${path}/${core_1.strings.dasherize(options.name)}/${core_1.strings.dasherize(options.name)}-store.module`);
        return Object.assign(Object.assign({}, options), { path,
            module,
            artifactName,
            moduleImportPath });
    });
}
function createStoreGroup(options) {
    return (host) => __awaiter(this, void 0, void 0, function* () {
        if (!options.project) {
            throw new schematics_1.SchematicsException('Option (project) is required.');
        }
        options = yield (0, common_1.applyNameAndPath)('store', host, options);
        options = (0, common_1.determineArtifactName)('store', host, options);
        options = yield determineStoreGroupLocation(host, options);
        const operations = [];
        operations.push((0, schematics_1.mergeWith)((0, schematics_1.apply)((0, schematics_1.url)('./files'), [
            (0, schematics_1.applyTemplates)(Object.assign(Object.assign({}, core_1.strings), options)),
            (0, schematics_1.move)(options.path),
        ])));
        operations.push((0, registration_1.addImportToNgModule)(options));
        operations.push((0, lint_fix_1.applyLintFix)());
        return (0, schematics_1.chain)(operations);
    });
}
exports.createStoreGroup = createStoreGroup;
