"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAddressFormConfiguration = void 0;
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@schematics/angular/utility/workspace");
const lint_fix_1 = require("../utils/lint-fix");
const registration_1 = require("../utils/registration");
function createAddressFormConfiguration(options) {
    return (host) => __awaiter(this, void 0, void 0, function* () {
        const workspace = yield (0, workspace_1.getWorkspace)(host);
        const project = workspace.projects.get(options.project);
        options.path = `/${project.sourceRoot}/app/shared/formly-address-forms/configurations`;
        options.countryCodeCaps = options.countryCode.toUpperCase();
        options.module = `/${project.sourceRoot}/app/shared/formly-address-forms/formly-address-forms.module.ts`;
        options.artifactPath = `/${project.sourceRoot}/app/shared/formly-address-forms/configurations/${core_1.strings.dasherize(options.countryCode)}/address-form-${core_1.strings.dasherize(options.countryCode)}.configuration`;
        const operations = [];
        operations.push((0, schematics_1.mergeWith)((0, schematics_1.apply)((0, schematics_1.url)('./files'), [
            (0, schematics_1.applyTemplates)(Object.assign(Object.assign({}, core_1.strings), options)),
            (0, schematics_1.move)(options.path),
        ])));
        operations.push((0, registration_1.addTokenProviderToNgModule)(Object.assign(Object.assign({}, options), { token: 'ADDRESS_FORM_CONFIGURATION', class: `AddressForm${options.countryCodeCaps}Configuration`, multi: true })));
        operations.push((0, lint_fix_1.applyLintFix)());
        return (0, schematics_1.chain)(operations);
    });
}
exports.createAddressFormConfiguration = createAddressFormConfiguration;
