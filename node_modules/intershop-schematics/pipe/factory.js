"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPipe = void 0;
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const common_1 = require("../utils/common");
const lint_fix_1 = require("../utils/lint-fix");
const registration_1 = require("../utils/registration");
function createPipe(options) {
    return (host) => __awaiter(this, void 0, void 0, function* () {
        if (!options.project) {
            throw new schematics_1.SchematicsException('Option (project) is required.');
        }
        options = yield (0, common_1.detectExtension)('pipe', host, options);
        options = yield (0, common_1.applyNameAndPath)('pipe', host, options);
        options = (0, common_1.determineArtifactName)('pipe', host, options);
        if (!options.extension) {
            options.module = `core/pipes.module`;
        }
        else {
            options.module = `extensions/${options.extension}/${options.extension}.module`;
        }
        options = (0, common_1.findDeclaringModule)(host, options);
        const operations = [];
        if (!options.skipImport) {
            operations.push((0, registration_1.addDeclarationToNgModule)(options));
            operations.push((0, registration_1.addExportToNgModule)(options));
            operations.push((0, registration_1.addProviderToNgModule)(options));
        }
        operations.push((0, schematics_1.mergeWith)((0, schematics_1.apply)((0, schematics_1.url)('./files'), [
            (0, schematics_1.applyTemplates)(Object.assign(Object.assign({}, core_1.strings), options)),
            (0, schematics_1.move)(options.path),
        ])));
        operations.push((0, lint_fix_1.applyLintFix)());
        return (0, schematics_1.chain)(operations);
    });
}
exports.createPipe = createPipe;
