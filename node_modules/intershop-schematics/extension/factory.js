"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createExtension = void 0;
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@schematics/angular/utility/workspace");
const common_1 = require("../utils/common");
const lint_fix_1 = require("../utils/lint-fix");
const registration_1 = require("../utils/registration");
function createExtension(options) {
    return (host) => __awaiter(this, void 0, void 0, function* () {
        if (!options.project) {
            throw new schematics_1.SchematicsException('Option (project) is required.');
        }
        options = yield (0, common_1.detectExtension)('extension', host, options);
        options = yield (0, common_1.applyNameAndPath)('extension', host, options);
        options = (0, common_1.determineArtifactName)('extension', host, options);
        const operations = [];
        operations.push((0, schematics_1.mergeWith)((0, schematics_1.apply)((0, schematics_1.url)('./files'), [
            (0, schematics_1.template)(Object.assign(Object.assign({}, core_1.strings), options)),
            (0, schematics_1.renameTemplateFiles)(),
            (0, schematics_1.move)(options.path),
        ])));
        const workspace = yield (0, workspace_1.getWorkspace)(host);
        const project = workspace.projects.get(options.project);
        const projectRoot = (0, workspace_1.buildDefaultPath)(project);
        const moduleImportOptions = {
            artifactName: `${core_1.strings.classify(options.name)}ExportsModule`,
            moduleImportPath: `${projectRoot}/extensions/${core_1.strings.dasherize(options.name)}/exports/${core_1.strings.dasherize(options.name)}-exports.module`,
        };
        const sharedModuleOptions = Object.assign({ module: `${projectRoot}/shared/shared.module.ts` }, moduleImportOptions);
        operations.push((0, registration_1.addExportToNgModule)(sharedModuleOptions));
        operations.push((0, registration_1.addImportToNgModule)(sharedModuleOptions));
        const appModuleOptions = {
            module: `${projectRoot}/app.module.ts`,
            artifactName: `${core_1.strings.classify(options.name)}RoutingModule`,
            moduleImportPath: `${projectRoot}/extensions/${core_1.strings.dasherize(options.name)}/pages/${core_1.strings.dasherize(options.name)}-routing.module`,
        };
        operations.push((0, registration_1.addImportToNgModuleBefore)(appModuleOptions, 'AppLastRoutingModule'));
        operations.push((0, lint_fix_1.applyLintFix)());
        return (0, schematics_1.chain)(operations);
    });
}
exports.createExtension = createExtension;
