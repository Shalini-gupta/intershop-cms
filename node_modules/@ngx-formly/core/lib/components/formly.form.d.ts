import { DoCheck, OnChanges, SimpleChanges, EventEmitter, OnDestroy, NgZone, QueryList } from '@angular/core';
import { FormGroup, FormArray } from '@angular/forms';
import { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache } from '../models';
import { FormlyFormBuilder } from '../services/formly.builder';
import { FormlyConfig } from '../services/formly.config';
import { FormlyFieldTemplates, FormlyTemplate } from './formly.template';
import * as i0 from "@angular/core";
export declare class FormlyForm implements DoCheck, OnChanges, OnDestroy {
    private builder;
    private config;
    private ngZone;
    private fieldTemplates;
    set form(form: FormGroup | FormArray);
    get form(): FormGroup | FormArray;
    set model(model: any);
    get model(): any;
    set fields(fieldGroup: FormlyFieldConfig[]);
    get fields(): FormlyFieldConfig[];
    set options(options: FormlyFormOptions);
    get options(): FormlyFormOptions;
    modelChange: EventEmitter<any>;
    set templates(templates: QueryList<FormlyTemplate>);
    field: FormlyFieldConfigCache;
    private _modelChangeValue;
    private valueChangesUnsubscribe;
    constructor(builder: FormlyFormBuilder, config: FormlyConfig, ngZone: NgZone, fieldTemplates: FormlyFieldTemplates);
    ngDoCheck(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private checkExpressionChange;
    private valueChanges;
    private setField;
    static ɵfac: i0.ɵɵFactoryDeclaration<FormlyForm, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FormlyForm, "formly-form", never, { "form": "form"; "model": "model"; "fields": "fields"; "options": "options"; }, { "modelChange": "modelChange"; }, ["templates"], never>;
}
