import { Validators } from '@angular/forms';
import { FORMLY_VALIDATORS, defineHiddenProp, isPromise, observe, clone, isObject, isNil } from '../../utils';
import { updateValidity } from '../field-form/utils';
import { isObservable } from 'rxjs';
import { map } from 'rxjs/operators';
/** @experimental */
export class FieldValidationExtension {
    constructor(config) {
        this.config = config;
    }
    onPopulate(field) {
        this.initFieldValidation(field, 'validators');
        this.initFieldValidation(field, 'asyncValidators');
    }
    initFieldValidation(field, type) {
        const validators = [];
        if (type === 'validators' && !(field.hasOwnProperty('fieldGroup') && isNil(field.key))) {
            validators.push(this.getPredefinedFieldValidation(field));
        }
        if (field[type]) {
            for (const validatorName of Object.keys(field[type])) {
                validatorName === 'validation'
                    ? validators.push(...field[type].validation.map((v) => this.wrapNgValidatorFn(field, v)))
                    : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName));
            }
        }
        defineHiddenProp(field, '_' + type, validators);
    }
    getPredefinedFieldValidation(field) {
        let VALIDATORS = [];
        FORMLY_VALIDATORS.forEach((opt) => observe(field, ['templateOptions', opt], ({ currentValue, firstChange }) => {
            VALIDATORS = VALIDATORS.filter((o) => o !== opt);
            if (currentValue != null && currentValue !== false) {
                VALIDATORS.push(opt);
            }
            if (!firstChange && field.formControl) {
                updateValidity(field.formControl);
            }
        }));
        return (control) => {
            if (VALIDATORS.length === 0) {
                return null;
            }
            return Validators.compose(VALIDATORS.map((opt) => () => {
                const value = field.templateOptions[opt];
                switch (opt) {
                    case 'required':
                        return Validators.required(control);
                    case 'pattern':
                        return Validators.pattern(value)(control);
                    case 'minLength':
                        return Validators.minLength(value)(control);
                    case 'maxLength':
                        return Validators.maxLength(value)(control);
                    case 'min':
                        return Validators.min(value)(control);
                    case 'max':
                        return Validators.max(value)(control);
                }
            }))(control);
        };
    }
    wrapNgValidatorFn(field, validator, validatorName) {
        let validatorOption = null;
        if (typeof validator === 'string') {
            validatorOption = clone(this.config.getValidator(validator));
        }
        if (typeof validator === 'object' && validator.name) {
            validatorOption = clone(this.config.getValidator(validator.name));
            if (validator.options) {
                validatorOption.options = validator.options;
            }
        }
        if (typeof validator === 'object' && validator.expression) {
            const { expression, ...options } = validator;
            validatorOption = {
                name: validatorName,
                validation: expression,
                options: Object.keys(options).length > 0 ? options : null,
            };
        }
        if (typeof validator === 'function') {
            validatorOption = {
                name: validatorName,
                validation: validator,
            };
        }
        return (control) => {
            const errors = validatorOption.validation(control, field, validatorOption.options);
            if (isPromise(errors)) {
                return errors.then((v) => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption));
            }
            if (isObservable(errors)) {
                return errors.pipe(map((v) => this.handleAsyncResult(field, validatorName ? !!v : v, validatorOption)));
            }
            return this.handleResult(field, validatorName ? !!errors : errors, validatorOption);
        };
    }
    handleAsyncResult(field, errors, options) {
        // workaround for https://github.com/angular/angular/issues/13200
        field.options.detectChanges(field);
        return this.handleResult(field, errors, options);
    }
    handleResult(field, errors, { name, options }) {
        if (typeof errors === 'boolean') {
            errors = errors ? null : { [name]: options ? options : true };
        }
        const ctrl = field.formControl;
        ctrl?.['_childrenErrors']?.[name]?.();
        if (isObject(errors)) {
            Object.keys(errors).forEach((name) => {
                const errorPath = errors[name].errorPath ? errors[name].errorPath : options?.errorPath;
                const childCtrl = errorPath ? field.formControl.get(errorPath) : null;
                if (childCtrl) {
                    const { errorPath, ...opts } = errors[name];
                    childCtrl.setErrors({ ...(childCtrl.errors || {}), [name]: opts });
                    !ctrl['_childrenErrors'] && defineHiddenProp(ctrl, '_childrenErrors', {});
                    ctrl['_childrenErrors'][name] = () => {
                        const { [name]: toDelete, ...childErrors } = childCtrl.errors || {};
                        childCtrl.setErrors(Object.keys(childErrors).length === 0 ? null : childErrors);
                    };
                }
            });
        }
        return errors;
    }
}
//# sourceMappingURL=data:application/json;base64,