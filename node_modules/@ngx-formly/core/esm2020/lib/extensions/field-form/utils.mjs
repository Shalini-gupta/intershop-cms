import { FormArray, FormGroup, FormControl } from '@angular/forms';
import { getKeyPath, getFieldValue, isNil, defineHiddenProp, observe, } from '../../utils';
export function unregisterControl(field, emitEvent = false) {
    const control = field.formControl;
    const fieldIndex = control['_fields'] ? control['_fields'].indexOf(field) : -1;
    if (fieldIndex !== -1) {
        control['_fields'].splice(fieldIndex, 1);
    }
    const form = control.parent;
    if (!form) {
        return;
    }
    const opts = { emitEvent };
    if (form instanceof FormArray) {
        const key = form.controls.findIndex((c) => c === control);
        if (key !== -1) {
            updateControl(form, opts, () => form.removeAt(key));
        }
    }
    else if (form instanceof FormGroup) {
        const paths = getKeyPath(field);
        const key = paths[paths.length - 1];
        if (form.get([key]) === control) {
            updateControl(form, opts, () => form.removeControl(key));
        }
    }
    control.setParent(null);
}
export function findControl(field) {
    if (field.formControl) {
        return field.formControl;
    }
    if (field['shareFormControl'] === false) {
        return null;
    }
    return field.form?.get(getKeyPath(field));
}
export function registerControl(field, control, emitEvent = false) {
    control = control || field.formControl;
    if (!control['_fields']) {
        defineHiddenProp(control, '_fields', []);
    }
    if (control['_fields'].indexOf(field) === -1) {
        control['_fields'].push(field);
    }
    if (!field.formControl && control) {
        defineHiddenProp(field, 'formControl', control);
        control.setValidators(null);
        control.setAsyncValidators(null);
        field.templateOptions.disabled = !!field.templateOptions.disabled;
        const disabledObserver = observe(field, ['templateOptions', 'disabled'], ({ firstChange, currentValue }) => {
            if (!firstChange) {
                currentValue ? field.formControl.disable() : field.formControl.enable();
            }
        });
        if (control.registerOnDisabledChange) {
            control.registerOnDisabledChange(disabledObserver.setValue);
        }
    }
    if (!field.form || isNil(field.key)) {
        return;
    }
    let form = field.form;
    const paths = getKeyPath(field);
    const value = getFieldValue(field);
    if (!(isNil(control.value) && isNil(value)) && control.value !== value && control instanceof FormControl) {
        control.patchValue(value);
    }
    for (let i = 0; i < paths.length - 1; i++) {
        const path = paths[i];
        if (!form.get([path])) {
            updateControl(form, { emitEvent }, () => form.setControl(path, new FormGroup({})));
        }
        form = form.get([path]);
    }
    const key = paths[paths.length - 1];
    if (!field._hide && form.get([key]) !== control) {
        updateControl(form, { emitEvent }, () => form.setControl(key, control));
    }
}
export function updateValidity(c, onlySelf = false) {
    const status = c.status;
    const value = c.value;
    c.updateValueAndValidity({ emitEvent: false, onlySelf });
    if (status !== c.status) {
        c.statusChanges.emit(c.status);
    }
    if (value !== c.value) {
        c.valueChanges.emit(c.value);
    }
}
function updateControl(form, opts, action) {
    /**
     *  workaround for https://github.com/angular/angular/issues/27679
     */
    if (form instanceof FormGroup && !form['__patchForEachChild']) {
        defineHiddenProp(form, '__patchForEachChild', true);
        form._forEachChild = (cb) => {
            Object.keys(form.controls).forEach((k) => form.controls[k] && cb(form.controls[k], k));
        };
    }
    /**
     * workaround for https://github.com/angular/angular/issues/20439
     */
    const updateValueAndValidity = form.updateValueAndValidity.bind(form);
    if (opts.emitEvent === false) {
        form.updateValueAndValidity = (opts) => {
            updateValueAndValidity({ ...(opts || {}), emitEvent: false });
        };
    }
    action();
    if (opts.emitEvent === false) {
        form.updateValueAndValidity = updateValueAndValidity;
    }
}
export function clearControl(form) {
    delete form?.['_fields'];
    form.setValidators(null);
    form.setAsyncValidators(null);
    if (form instanceof FormGroup || form instanceof FormArray) {
        Object.keys(form.controls).forEach((k) => clearControl(form.controls[k]));
    }
}
//# sourceMappingURL=data:application/json;base64,