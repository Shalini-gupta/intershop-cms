import { TestBed } from '@angular/core/testing';
import { Component, APP_INITIALIZER } from '@angular/core';
import { FormlyModule, FormlyFormBuilder } from '@ngx-formly/core';
import { ReactiveFormsModule } from '@angular/forms';
import { By } from '@angular/platform-browser';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
function setInputs(fixture, inputs, detectChanges = true) {
    Object.keys(inputs).forEach((input) => {
        fixture.componentInstance[input] = inputs[input];
    });
    if (detectChanges !== false) {
        fixture.detectChanges();
    }
}
export function createComponent({ template, inputs, config, detectChanges, imports, declarations, providers, }) {
    TestBed.configureTestingModule({
        declarations: [TestComponent, ...(declarations || [])],
        imports: [ReactiveFormsModule, FormlyModule.forRoot(config), ...(imports || [])],
        providers: providers || [],
        teardown: { destroyAfterEach: false },
    }).overrideComponent(TestComponent, {
        set: {
            template,
            inputs: Object.keys(inputs),
        },
    });
    const fixture = TestBed.createComponent(TestComponent);
    Object.keys(inputs).forEach((input) => {
        fixture.componentInstance[input] = inputs[input];
    });
    setInputs(fixture, inputs, detectChanges);
    const utils = {
        fixture,
        detectChanges: () => fixture.detectChanges(),
        setInputs: (props) => setInputs(fixture, props),
        query: (selector) => fixture.debugElement.query(By.css(selector)),
        queryAll: (selector) => fixture.debugElement.queryAll(By.css(selector)),
    };
    Object.keys(inputs).forEach((input) => {
        Object.defineProperty(utils, input, {
            get: () => fixture.componentInstance[input],
        });
    });
    return utils;
}
export function createFieldComponent(field, config = {}) {
    const model = field?.model || {};
    const options = field?.options || {};
    delete field?.model;
    delete field?.options;
    return createComponent({
        template: '<formly-field [field]="field"></formly-field>',
        inputs: { field },
        ...config,
        providers: [
            ...(config.providers || []),
            {
                provide: APP_INITIALIZER,
                useFactory: (builder) => () => {
                    builder.build({
                        model,
                        options,
                        fieldGroup: [field],
                    });
                    return of(null);
                },
                deps: [FormlyFormBuilder],
                multi: true,
            },
        ],
    });
}
class TestComponent {
}
TestComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: TestComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TestComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.1.2", type: TestComponent, selector: "formly-test-component", ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: TestComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'formly-test-component',
                    template: '',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvY29yZS90ZXN0aW5nL3NyYy9jb21wb25lbnQtZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFvQixNQUFNLHVCQUF1QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxTQUFTLEVBQWdCLGVBQWUsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUNuRixPQUFPLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFtQyxNQUFNLGtCQUFrQixDQUFDO0FBQ3BHLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQUUxQixTQUFTLFNBQVMsQ0FBSSxPQUE0QixFQUFFLE1BQVMsRUFBRSxhQUFhLEdBQUcsSUFBSTtJQUNqRixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1FBQ3BDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLGFBQWEsS0FBSyxLQUFLLEVBQUU7UUFDM0IsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO0tBQ3pCO0FBQ0gsQ0FBQztBQVlELE1BQU0sVUFBVSxlQUFlLENBQUksRUFDakMsUUFBUSxFQUNSLE1BQU0sRUFDTixNQUFNLEVBQ04sYUFBYSxFQUNiLE9BQU8sRUFDUCxZQUFZLEVBQ1osU0FBUyxHQUNZO0lBQ3JCLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztRQUM3QixZQUFZLEVBQUUsQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLFlBQVksSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN0RCxPQUFPLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLENBQUM7UUFDaEYsU0FBUyxFQUFFLFNBQVMsSUFBSSxFQUFFO1FBQzFCLFFBQVEsRUFBRSxFQUFFLGdCQUFnQixFQUFFLEtBQUssRUFBRTtLQUN0QyxDQUFDLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFO1FBQ2xDLEdBQUcsRUFBRTtZQUNILFFBQVE7WUFDUixNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDNUI7S0FDRixDQUFDLENBQUM7SUFFSCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDcEMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuRCxDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBVTFDLE1BQU0sS0FBSyxHQUFHO1FBQ1osT0FBTztRQUNQLGFBQWEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFO1FBQzVDLFNBQVMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUM7UUFDL0MsS0FBSyxFQUFFLENBQUMsUUFBZ0IsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN6RSxRQUFRLEVBQUUsQ0FBQyxRQUFnQixFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ2hFLENBQUM7SUFFbEIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtRQUNwQyxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7WUFDbEMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUM7U0FDNUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLFVBQVUsb0JBQW9CLENBQ2xDLEtBQXdCLEVBQ3hCLFNBQTBELEVBQUU7SUFFNUQsTUFBTSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssSUFBSSxFQUFFLENBQUM7SUFDakMsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFDckMsT0FBUSxLQUFhLEVBQUUsS0FBSyxDQUFDO0lBQzdCLE9BQVEsS0FBYSxFQUFFLE9BQU8sQ0FBQztJQUUvQixPQUFPLGVBQWUsQ0FBK0I7UUFDbkQsUUFBUSxFQUFFLCtDQUErQztRQUN6RCxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUU7UUFDakIsR0FBRyxNQUFNO1FBQ1QsU0FBUyxFQUFFO1lBQ1QsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDO1lBQzNCO2dCQUNFLE9BQU8sRUFBRSxlQUFlO2dCQUN4QixVQUFVLEVBQUUsQ0FBQyxPQUEwQixFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUU7b0JBQy9DLE9BQU8sQ0FBQyxLQUFLLENBQUM7d0JBQ1osS0FBSzt3QkFDTCxPQUFPO3dCQUNQLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQztxQkFDcEIsQ0FBQyxDQUFDO29CQUVILE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNsQixDQUFDO2dCQUNELElBQUksRUFBRSxDQUFDLGlCQUFpQixDQUFDO2dCQUN6QixLQUFLLEVBQUUsSUFBSTthQUNaO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsTUFJTSxhQUFhOzswR0FBYixhQUFhOzhGQUFiLGFBQWEsNkRBRlAsRUFBRTsyRkFFUixhQUFhO2tCQUpsQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLFFBQVEsRUFBRSxFQUFFO2lCQUNiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdEJlZCwgQ29tcG9uZW50Rml4dHVyZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBDb21wb25lbnQsIERlYnVnRWxlbWVudCwgQVBQX0lOSVRJQUxJWkVSLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybWx5TW9kdWxlLCBGb3JtbHlGb3JtQnVpbGRlciwgRm9ybWx5RmllbGRDb25maWcsIENvbmZpZ09wdGlvbiB9IGZyb20gJ0BuZ3gtZm9ybWx5L2NvcmUnO1xuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEJ5IH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xuXG5mdW5jdGlvbiBzZXRJbnB1dHM8VD4oZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxUPiwgaW5wdXRzOiBULCBkZXRlY3RDaGFuZ2VzID0gdHJ1ZSkge1xuICBPYmplY3Qua2V5cyhpbnB1dHMpLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZVtpbnB1dF0gPSBpbnB1dHNbaW5wdXRdO1xuICB9KTtcblxuICBpZiAoZGV0ZWN0Q2hhbmdlcyAhPT0gZmFsc2UpIHtcbiAgICBmaXh0dXJlLmRldGVjdENoYW5nZXMoKTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgSUNvbXBvbmVudE9wdGlvbnM8VD4gZXh0ZW5kcyBOZ01vZHVsZSB7XG4gIHRlbXBsYXRlPzogc3RyaW5nO1xuICBpbnB1dHM/OiBUO1xuICBjb25maWc/OiBDb25maWdPcHRpb247XG4gIGRldGVjdENoYW5nZXM/OiBib29sZWFuO1xufVxuaW50ZXJmYWNlIElGb3JtbHlEZWJ1Z0VsZW1lbnQ8RT4gZXh0ZW5kcyBEZWJ1Z0VsZW1lbnQge1xuICByZWFkb25seSBuYXRpdmVFbGVtZW50OiBFO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50PFQ+KHtcbiAgdGVtcGxhdGUsXG4gIGlucHV0cyxcbiAgY29uZmlnLFxuICBkZXRlY3RDaGFuZ2VzLFxuICBpbXBvcnRzLFxuICBkZWNsYXJhdGlvbnMsXG4gIHByb3ZpZGVycyxcbn06IElDb21wb25lbnRPcHRpb25zPFQ+KSB7XG4gIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbVGVzdENvbXBvbmVudCwgLi4uKGRlY2xhcmF0aW9ucyB8fCBbXSldLFxuICAgIGltcG9ydHM6IFtSZWFjdGl2ZUZvcm1zTW9kdWxlLCBGb3JtbHlNb2R1bGUuZm9yUm9vdChjb25maWcpLCAuLi4oaW1wb3J0cyB8fCBbXSldLFxuICAgIHByb3ZpZGVyczogcHJvdmlkZXJzIHx8IFtdLFxuICAgIHRlYXJkb3duOiB7IGRlc3Ryb3lBZnRlckVhY2g6IGZhbHNlIH0sXG4gIH0pLm92ZXJyaWRlQ29tcG9uZW50KFRlc3RDb21wb25lbnQsIHtcbiAgICBzZXQ6IHtcbiAgICAgIHRlbXBsYXRlLFxuICAgICAgaW5wdXRzOiBPYmplY3Qua2V5cyhpbnB1dHMpLFxuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChUZXN0Q29tcG9uZW50KTtcbiAgT2JqZWN0LmtleXMoaW5wdXRzKS5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgIGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2VbaW5wdXRdID0gaW5wdXRzW2lucHV0XTtcbiAgfSk7XG5cbiAgc2V0SW5wdXRzKGZpeHR1cmUsIGlucHV0cywgZGV0ZWN0Q2hhbmdlcyk7XG5cbiAgdHlwZSBGaXh0dXJlVXRpbHMgPSBUICYge1xuICAgIGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8VD47XG4gICAgZGV0ZWN0Q2hhbmdlczogdHlwZW9mIGZpeHR1cmVbJ2RldGVjdENoYW5nZXMnXTtcbiAgICBzZXRJbnB1dHM6IChpbnB1dHM6IFBhcnRpYWw8VD4pID0+IHZvaWQ7XG4gICAgcXVlcnk6IDxFIGV4dGVuZHMgRWxlbWVudCA9IEVsZW1lbnQ+KHNlbGVjdG9yOiBzdHJpbmcpID0+IElGb3JtbHlEZWJ1Z0VsZW1lbnQ8RT47XG4gICAgcXVlcnlBbGw6IDxFIGV4dGVuZHMgRWxlbWVudCA9IEVsZW1lbnQ+KHNlbGVjdG9yOiBzdHJpbmcpID0+IElGb3JtbHlEZWJ1Z0VsZW1lbnQ8RT5bXTtcbiAgfTtcblxuICBjb25zdCB1dGlscyA9IHtcbiAgICBmaXh0dXJlLFxuICAgIGRldGVjdENoYW5nZXM6ICgpID0+IGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpLFxuICAgIHNldElucHV0czogKHByb3BzKSA9PiBzZXRJbnB1dHMoZml4dHVyZSwgcHJvcHMpLFxuICAgIHF1ZXJ5OiAoc2VsZWN0b3I6IHN0cmluZykgPT4gZml4dHVyZS5kZWJ1Z0VsZW1lbnQucXVlcnkoQnkuY3NzKHNlbGVjdG9yKSksXG4gICAgcXVlcnlBbGw6IChzZWxlY3Rvcjogc3RyaW5nKSA9PiBmaXh0dXJlLmRlYnVnRWxlbWVudC5xdWVyeUFsbChCeS5jc3Moc2VsZWN0b3IpKSxcbiAgfSBhcyBGaXh0dXJlVXRpbHM7XG5cbiAgT2JqZWN0LmtleXMoaW5wdXRzKS5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh1dGlscywgaW5wdXQsIHtcbiAgICAgIGdldDogKCkgPT4gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZVtpbnB1dF0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiB1dGlscztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZpZWxkQ29tcG9uZW50KFxuICBmaWVsZDogRm9ybWx5RmllbGRDb25maWcsXG4gIGNvbmZpZzogSUNvbXBvbmVudE9wdGlvbnM8eyBmaWVsZDogRm9ybWx5RmllbGRDb25maWcgfT4gPSB7fSxcbikge1xuICBjb25zdCBtb2RlbCA9IGZpZWxkPy5tb2RlbCB8fCB7fTtcbiAgY29uc3Qgb3B0aW9ucyA9IGZpZWxkPy5vcHRpb25zIHx8IHt9O1xuICBkZWxldGUgKGZpZWxkIGFzIGFueSk/Lm1vZGVsO1xuICBkZWxldGUgKGZpZWxkIGFzIGFueSk/Lm9wdGlvbnM7XG5cbiAgcmV0dXJuIGNyZWF0ZUNvbXBvbmVudDx7IGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZyB9Pih7XG4gICAgdGVtcGxhdGU6ICc8Zm9ybWx5LWZpZWxkIFtmaWVsZF09XCJmaWVsZFwiPjwvZm9ybWx5LWZpZWxkPicsXG4gICAgaW5wdXRzOiB7IGZpZWxkIH0sXG4gICAgLi4uY29uZmlnLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgLi4uKGNvbmZpZy5wcm92aWRlcnMgfHwgW10pLFxuICAgICAge1xuICAgICAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgICAgIHVzZUZhY3Rvcnk6IChidWlsZGVyOiBGb3JtbHlGb3JtQnVpbGRlcikgPT4gKCkgPT4ge1xuICAgICAgICAgIGJ1aWxkZXIuYnVpbGQoe1xuICAgICAgICAgICAgbW9kZWwsXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgZmllbGRHcm91cDogW2ZpZWxkXSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBvZihudWxsKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVwczogW0Zvcm1seUZvcm1CdWlsZGVyXSxcbiAgICAgICAgbXVsdGk6IHRydWUsXG4gICAgICB9LFxuICAgIF0sXG4gIH0pO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmb3JtbHktdGVzdC1jb21wb25lbnQnLFxuICB0ZW1wbGF0ZTogJycsXG59KVxuY2xhc3MgVGVzdENvbXBvbmVudCB7fVxuIl19